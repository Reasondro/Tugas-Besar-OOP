        // Sun SUN = Sun.getInstance();

        // BulletPlant myBulletPlant = new BulletPlant();
        // Sunflower mySunflower = new Sunflower();
        // Lilypad myLilypad = new Lilypad();
        // // plants.add(myBulletPlant);
        // plants.add(mySunflower);

        // Position pos47 = new Position(4, 7);
        // map.getPetak(pos47).addCreature(myLilypad);

        // Position pos61 = new Position(6, 1);
        // map.getPetak(pos61).addCreature(new Sunflower());
        

        //? below for plant thread testing

        
       
        // CountDownLatch latch = new CountDownLatch(2);
        
        // Thread plantThreadTest = new Thread() 
        // {
        //     @Override
        //     public void run() {
        //         Random rand = new Random();
        //         long tempStart = dayStart;
        //         long nextSunPointTime = 5 + rand.nextInt(6);
        //         while (true) {
        //             if(map.isProtectedBaseCompromised()) //? ini jga sama bisa pake factory cman nanti aja
        //             {
        //                 break;
        //             }
                    
        //             long currentTime = System.currentTimeMillis();
        //             long timeElapsed = (currentTime - tempStart) / 1000; 

        //             if (timeElapsed >= 200) 
        //             {
        //                 tempStart = currentTime;
        //                 continue;
        //             }
        //             if(timeElapsed <= 100)
        //             {
        //                 if (timeElapsed >= nextSunPointTime) 
        //                 {
        //                     SUN.addSunPoints(25);
        //                     System.out.println("Got sun points from randomizer "+ SUN.getSunPoints());
        //                     nextSunPointTime = timeElapsed + 5 + rand.nextInt(6); //? Random delay between 5 and 10 seconds
        //                 }
        //             }

        //             for(Plant p : plants)
        //             {
        //                 p.refreshPlant();
        //             }
        //             // myBulletPlant.refreshPlant();
        //             latch.countDown();
        //             try {
        //                 Thread.sleep(1000);
        //             } catch (InterruptedException e) {
        //             System.out.println("Plant Loop Interrupted");
        //             return;
        //             }
        //         }
        //     }
        // };

        // Thread zombieThreadTest = new Thread() {
        //     @Override
        //     public void run() {
        //         Random rand = new Random();
        //         List<Petak> zombieBase = GameMap.getInstance().getZombieBase();
        //         List<Zombie> zombies = new ArrayList<Zombie>();

        //         BucketheadZombieFactory bucketheadZombieFactory = new BucketheadZombieFactory();
        //         ConeheadZombieFactory coneheadZombieFactory = new ConeheadZombieFactory();
        //         DuckyTubeZombieFactory duckyTubeZombieFactory = new DuckyTubeZombieFactory();
        //         DolphinRiderZombieFactory dolphinRiderZombieFactory = new DolphinRiderZombieFactory();
        //         NormalZombieFactory normalZombieFactory = new NormalZombieFactory();
        //         PoleVaultingZombieFactory poleVaultingZombieFactory = new PoleVaultingZombieFactory();

        //         List<ZombieFactory> zombieFactories = Arrays.asList(bucketheadZombieFactory, coneheadZombieFactory, normalZombieFactory, poleVaultingZombieFactory);
        //         List<ZombieFactory> aquaticZombieFactories = Arrays.asList(duckyTubeZombieFactory, dolphinRiderZombieFactory);
        //         long tempStart = dayStart;
                
        //         while (true) {
        //             if( map.isProtectedBaseCompromised()) //? could use zombie factory to check if all living zombie is dead cman nanti aja
        //             {
        //                 break;
        //             }
        //             long currentTime = System.currentTimeMillis();
        //             long timeElapsed = (currentTime - tempStart) / 1000; 
        //             if (timeElapsed >= 200) 
        //             {
        //                 tempStart = currentTime;
        //                 continue;
        //             }
        //             if(timeElapsed >= 20 && timeElapsed <= 160)
        //             {
        //                 for (Petak p : zombieBase) 
        //                 {
        //                     if(ZombieFactory.getZombieCount() < 10)
        //                     {
        //                         if(rand.nextDouble() < 0.3) 
        //                         {
        //                             if(p.getType().equals("Aquatic Zombie Base"))
        //                             {
        //                                 ZombieFactory factory = aquaticZombieFactories.get(rand.nextInt(aquaticZombieFactories.size()));
        //                                 Zombie zombie = factory.createZombie();
        //                                 p.addCreature(zombie);
        //                                 zombies.add(zombie);
        //                             }
        //                             else
        //                             {
        //                                 ZombieFactory factory = zombieFactories.get(rand.nextInt(zombieFactories.size()));
        //                                 Zombie zombie = factory.createZombie();
        //                                 p.addCreature(zombie);
        //                                 zombies.add(zombie);
        //                             }
        //                         }
        //                     }
        //                 }
        //             }

        //             for(Zombie z : zombies)
        //             {
        //                 z.refreshZombie();
        //             }
        //             latch.countDown();
        //             try {
        //                 Thread.sleep(1000);
        //             } catch (InterruptedException e)
        //              {
        //             System.out.println("Zombie Loop Interrupted");
        //             return;
        //             }
        //         }
        //     }
        // };

        // // plantThreadTest.start();
        // // zombieThreadTest.start();

        // try{
        //     latch.await();
        // }
        // catch(InterruptedException e)
        // {
        //     e.printStackTrace();
        // }
        
        // Thread gameThreadTest = new Thread() {
        //     @Override
        //     public void run() {
        //         while (true) {
        //             if(map.isProtectedBaseCompromised())
        //             {
        //                 break;
        //             }
        //             final long currentTime = System.currentTimeMillis() - dayStart;
        //             final long elapsedSeconds = currentTime/1000;
        //             final long secondsDisplay = elapsedSeconds % 60;
        //             final long minutesDisplay = elapsedSeconds / 60;
        //             System.out.println("Time right now "+ minutesDisplay + ":" + secondsDisplay);

        //             map.printMap();
        //             try {
        //                 Thread.sleep(1000);
        //             // secondsPassed++;

        //             } catch (InterruptedException e) {
        //                 e.printStackTrace();
        //             }
        //         }
        //     }
        // };
        // gameThreadTest.start();